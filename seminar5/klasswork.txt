Задание1. Палиндром

% Rules
palindrome(List) :-
    reverse(List, List).

% Query 1
palindrome([1,2,3,2,1]).

% Query 2
palindrome([10, 35, 40]).

Суть фрагмента: проверка, является ли список List палиндромом.
Построчно: в данном случае встроенный метод reverse - истинен, когда List “развернутой” версией себя.
Результат исполнения: [1,2,3,2,1] - true (является палиндромом), [10, 35, 40] - false (не является
палиндромом)

Задание 2. Поиск: логический

% Rules
member(X, [X|_]).
member(X, [_|T]) :-
    member(X, T).

% Query
?- member(0, [1,2,3])

Суть фрагмента: проверка наличия элемента X в списке.
Построчно: предикат member истинен, если
● элемент X является первым элементом списка
● элемент X не является первым элементом списка и member(X, T) истинен для оставшейся части списка T
Результат исполнения: false, поскольку 0 не содержится в списке [1,2,3].

Задание 3. len
% Rules
len([], 0).
len([_|T], Len) :-
    len(T, Len1), Lenis Len1 + 1.

% Query
len([1,2,3,4,5,6,7,8], Len)

Суть фрагмента: вычисление длины списка.
Построчно: Для пустого списка - результат равен 0. Для непустых списков, len истинен для таких значений
Len, для которых одновременно истинен len(T, Len1) и Len равен Len1 + 1. Таким образом, решающий момент
в рекурсии наступает, когда длина списка T равна 1, и Len1, соответственно равен 0.
Результат исполнения: 8, поскольку вычисляется длина списка [1,2,3,4,5,6,7,8].

Практическое задание 1: Реализовать изображённое генеалогическое древо на языке Prolog таким образом, чтобы 
про Алексея и Анастасию можно было узнать кто их: мать, отец, дедушки, бабушки, дети.

female(lubov).
female(galina).
female(vera).
female(anastasiya).
female(olga).
male(sergey).
male(vladimir).
male(alexey).
male(alexander).
male(serafim).
parent(vera, lubov).
parent(vera, sergey).
parent(alexey, galina).
parent(alexey, vladimir).
parent(anastasiya, vera).
parent(anastasiya, alexey).
parent(olga, vera).
parent(olga, alexey).
parent(serafim, anastasiya).
parent(serafim, alexander).

father(X,Y):- parent(X,Y), mail(Y).
mother(X,Y):- parent(X,Y), femail(Y).
grandfather(X, Z):- parent(X, Y), father(Y, Z).
grandmother(X, Z):- parent(X, Y), mother(Y, Z).

child(X, Y):- parent(Y, X)

Практическое задание 2: Написать предикат на языке Prolog, который для входного списка возвращает максимальный элемент в
этом списке.

% Rules
max_list([X], X).
max_list([H|T], Max) :-
    max_list(T, Max),
    (H > Max1, Max is H; Max is Max1)

% Query
?- max_list([1,2,3,4], X).

Практическое задание 3: Реализовать логическую программу (предикат), которая принимает на вход массив и возвращает его
версию без дубликатов.

% Rules
remove_duplicates([], []).
remove_duplicates([H|T], Result) :-
    member(H, T),
    remove_duplicates(T, Result).
remove_duplicates([H|T], [H|Result]) :-
    \+ member(H, T),
    remove_duplicates(T, Result).

% Query
?- remove_duplicates([1,2,3,1,1], Result).